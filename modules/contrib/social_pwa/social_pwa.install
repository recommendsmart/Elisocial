<?php

/**
 * @file
 * Install and uninstall for the social_pwa module.
 */

use Minishlink\WebPush\VAPID;

/**
 * Implements hook_install().
 */
function social_pwa_install() {
  \Drupal::messenger()->addStatus(t('The Social PWA module has been enabled.'));

  // Check for existing keys.
  $vapid_keys = \Drupal::state()->get('social_pwa.vapid_keys');

  // No keys existent, let's generate new ones.
  if (!isset($vapid_keys['public'], $vapid_keys['private'])) {
    /** @var \Minishlink\WebPush\VAPID $generated_keys */
    $generated_keys = VAPID::createVapidKeys();

    \Drupal::state()->set('social_pwa.vapid_keys', [
      'public' => $generated_keys['publicKey'],
      'private' => $generated_keys['privateKey'],
    ]);
  }

  // The activity_send_push module is actually a dependency but
  // adding it to .info.yml creates an issue in the composer metadata
  // generated by Drupal.org, so we must enable the module manually on
  // install.
  // See https://www.drupal.org/project/social_pwa/issues/3392949.
  \Drupal::service('module_installer')->install([
    'activity_send_push',
  ]);
}

/**
 * Implements hook_requirements().
 */
function social_pwa_requirements($phase) {
  $requirements = [];

  // GMP library.
  if ($phase === 'runtime' || $phase === 'install') {
    // Check for the PHP GMP library.
    if (function_exists('gmp_init')) {
      $requirements['social_pwa_gmp'] = [
        'value' => t('PHP GMP library is installed.'),
      ];
    }
    else {
      $requirements['social_pwa_gmp'] = [
        'value' => t('Not installed'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('The GMP library for PHP is missing or outdated. Check the <a href="http://php.net/manual/book.gmp.php">PHP GMP documentation</a> for information on how to correct this.'),
      ];
    }
    $requirements['social_pwa_gmp']['title'] = t('GMP library');
  }

  // VAPID keys.
  if ($phase === 'runtime') {
    $vapid_keys = \Drupal::state()->get('social_pwa.vapid_keys');

    // VAPID keys are present.
    if (isset($vapid_keys['public'], $vapid_keys['private'])) {
      $requirements['social_pwa_vapid'] = [
        'value' => t('VAPID keys are generated.'),
      ];
    }
    else {
      $requirements['social_pwa_vapid'] = [
        'value' => t('No VAPID keys found.'),
        'severity' => REQUIREMENT_WARNING,
        'description' => t('Without VAPID keys no push notifications can be send. Turning the Social PWA module off and on again should generate new keys.'),
      ];
    }
    $requirements['social_pwa_vapid']['title'] = t('Push notifications VAPID keys');
  }

  return $requirements;
}

/**
 * Install the "Activity Send Push Notification" module.
 */
function social_pwa_update_8001() {
  \Drupal::service('module_installer')->install([
    'activity_send_push_notification',
  ]);
}

/**
 * Implements hook_uninstall().
 */
function social_pwa_uninstall() {
  $config_factory = Drupal::configFactory();
  // Delete all of the default settings.
  $config_factory->getEditable('social_pwa.settings')->delete();
  // Define all the image styles that need to be removed.
  $image_styles = [
    'social_pwa_icon_128',
    'social_pwa_icon_144',
    'social_pwa_icon_152',
    'social_pwa_icon_180',
    'social_pwa_icon_192',
    'social_pwa_icon_256',
    'social_pwa_icon_512',
  ];

  // At uninstall, delete the image styles to
  // prevent error when re-enabling this module.
  foreach ($image_styles as $image_style) {
    $config_factory->getEditable('image.style.' . $image_style)->delete();
  }

  // Remove the VAPID keys on uninstall.
  \Drupal::state()->delete('social_pwa.vapid_keys');

  // Delete all subscriptions.
  \Drupal::service('user.data')->delete('social_pwa');
}
